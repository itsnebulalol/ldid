name: build
on:
  push:
    paths:
      - '*.c'
      - '*.cpp'
      - '.github/workflows/*'
      - 'Makefile'
  pull_request:
    paths:
      - '*.c'
      - '*.cpp'
      - '.github/workflows/*'
      - 'Makefile'
  workflow_dispatch:
  release:
    types:
      - created

env:
  OPENSSL_VERSION: 3.0.5
  SCCACHE_VERSION: 0.3.0

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        triple:
        - aarch64-linux-musl
        - x86_64-linux-musl
        - armv7l-linux-musleabihf
        - x86_64-w64-mingw32
        - x86_64-freebsd-freebsd
    env:
      TOOLCHAIN: ${{ matrix.triple }}-cross
      TRIPLE: ${{ matrix.triple }}

    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/sccache
          ~/dep_src
        key: build-linux-${{ matrix.triple }}-${{ env.GITHUB_SHA }}
        restore-keys: |
          build-linux-${{ matrix.triple }}-
    - name: setup environment
      run: |
        export DOWNLOAD_PATH=${HOME}/dep_src
        export DEP_PATH=${HOME}/build
        mkdir -p ${DOWNLOAD_PATH} ${DEP_PATH}
        echo "DOWNLOAD_PATH=${DOWNLOAD_PATH}" >> $GITHUB_ENV
        echo "DEP_PATH=${DEP_PATH}" >> $GITHUB_ENV
        echo "ARCH=$(echo ${TRIPLE} | cut -d- -f 1)" >> $GITHUB_ENV
        echo "OS=$(echo ${TRIPLE} | cut -d- -f 2)" >> $GITHUB_ENV
        if [ "$(echo ${TRIPLE} | cut -d- -f 2)" = "w64" ]; then
          echo "EXT=.exe" >> $GITHUB_ENV
        else
          echo "EXT=" >> $GITHUB_ENV
        fi
    - name: setup musl toolchain
      if: ${{ env.OS != 'freebsd' }}
      run: |
        # Download Toolchain
        wget -nc -P ${DOWNLOAD_PATH} https://static2.itsnebula.net/${TOOLCHAIN}.tgz
        tar xf ${DOWNLOAD_PATH}/${TOOLCHAIN}.tgz -C ${HOME}
        # Download sccache
    
    - name: setup freebsd base
      if: ${{ env.OS == 'freebsd' }}
      run: |
          set -x
          sudo apt-get update && sudo apt-get install -y lld
          wget -q -nc -P ${DOWNLOAD_PATH} http://ftp-archive.freebsd.org/pub/FreeBSD-Archive/old-releases/amd64/13.0-RELEASE/base.txz
          mkdir -p ${HOME}/${TOOLCHAIN}
          tar xJf ${DOWNLOAD_PATH}/base.txz -C ${HOME}/${TOOLCHAIN}
          echo "SYSROOT=${HOME}/${TOOLCHAIN}" >> $GITHUB_ENV
    - name: setup sccache
      run: |
        set -x
        wget -nc -P ${DOWNLOAD_PATH} \
          https://github.com/mozilla/sccache/releases/download/v${SCCACHE_VERSION}/sccache-v${SCCACHE_VERSION}-x86_64-unknown-linux-musl.tar.gz
        tar xf ${DOWNLOAD_PATH}/sccache-v${SCCACHE_VERSION}-x86_64-unknown-linux-musl.tar.gz -C ${HOME}
        mv ${HOME}/sccache-v${SCCACHE_VERSION}-x86_64-unknown-linux-musl/sccache ${HOME}/${TOOLCHAIN}/bin
        chmod +x ${HOME}/${TOOLCHAIN}/bin/sccache
        if [ "${OS}" != "freebsd" ]; then
          echo "CC=sccache ${TRIPLE}-gcc" >> $GITHUB_ENV
          echo "CXX=sccache ${TRIPLE}-g++" >> $GITHUB_ENV
          echo "AR=${TRIPLE}-gcc-ar" >> $GITHUB_ENV
          echo "NM=${TRIPLE}-gcc-nm" >> $GITHUB_ENV
          echo "RANLIB=${TRIPLE}-gcc-ranlib" >> $GITHUB_ENV
          echo "STRIP=${TRIPLE}-strip" >> $GITHUB_ENV
          echo "${HOME}/${TOOLCHAIN}/bin" >> $GITHUB_PATH
        else
          echo "CC=${SYSROOT}/bin/sccache clang -target ${TRIPLE}" >> $GITHUB_ENV
          echo "CXX=${SYSROOT}/bin/sccache clang++ -target ${TRIPLE}" >> $GITHUB_ENV
          echo "AR=llvm-ar-14" >> $GITHUB_ENV
          echo "NM=llvm-nm-14" >> $GITHUB_ENV
          echo "RANLIB=llvm-ranlib-14" >> $GITHUB_ENV
          echo "STRIP=llvm-strip-14" >> $GITHUB_ENV
        fi
        if [ "${OS}" = "w64" ]; then
          echo "CFLAGS=-Os -fPIC -fno-pie -no-pie -static -ffunction-sections -fdata-sections" >> $GITHUB_ENV
          echo "CXXFLAGS=-Os -fPIC -fno-pie -no-pie -static -ffunction-sections -fdata-sections" >> $GITHUB_ENV
          echo "LDFLAGS=-Os -fPIC -fno-pie -no-pie -static -static-libstdc++ -Wl,--gc-sections -Wl,-strip-all -ffunction-sections -fdata-sections" >> $GITHUB_ENV
        elif [ "${OS}" != "freebsd" ]; then
          echo "CFLAGS=-Os -fPIC -fno-pie -no-pie -static -ffunction-sections -flto -fdata-sections" >> $GITHUB_ENV
          echo "CXXFLAGS=-Os -fPIC -fno-pie -no-pie -static -ffunction-sections -flto -fdata-sections" >> $GITHUB_ENV
          echo "LDFLAGS=-Os -fPIC -fno-pie -no-pie -static -static-libstdc++ -Wl,--gc-sections -Wl,-strip-all -flto -ffunction-sections -fdata-sections" >> $GITHUB_ENV
        else   
          echo "CFLAGS=-Os -ffunction-sections -flto -fdata-sections -static --sysroot=${SYSROOT} -I${SYSROOT}/usr/include/c++/v1" >> $GITHUB_ENV
          echo "CXXFLAGS=-Os -ffunction-sections -flto -fdata-sections -static --sysroot=${SYSROOT} -I${SYSROOT}/usr/include/c++/v1" >> $GITHUB_ENV
          echo "LDFLAGS=-Os -ffunction-sections -flto -fdata-sections -static --sysroot=${SYSROOT} -fuse-ld=lld -stdlib=libc++" >> $GITHUB_ENV
          echo "LIBRARY_PATH=${LIBRARY_PATH}:${SYSROOT}/usr/lib/" >> $GITHUB_ENV
        fi
    - uses: actions/checkout@v3
      with:
        repository: libimobiledevice/libplist
        path: libplist
    - name: build libplist
      run: |
        cd libplist
        ./autogen.sh --host=${TRIPLE} --without-cython --enable-static --disable-shared || cat config.log
        make -j$(nproc)
        echo "LIBPLIST_INCLUDES=-I${GITHUB_WORKSPACE}/libplist/include" >> $GITHUB_ENV
        echo "LIBPLIST_LIBS=${GITHUB_WORKSPACE}/libplist/src/.libs/libplist-2.0.a" >> $GITHUB_ENV
    - name: build openssl
      run: |
        if [ "${OS}" = "w64" ]; then
          export PLATFORM="mingw64"
        elif [ "${ARCH}" = "armv7l" ]; then
          export PLATFORM="linux-armv4"
        elif [ "${OS}" = "freebsd" ]; then
          export PLATFORM="BSD-generic64"
        else
          export PLATFORM="linux-${ARCH}"
        fi
        wget -nc -P ${DOWNLOAD_PATH} https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
        tar xf ${DOWNLOAD_PATH}/openssl-${OPENSSL_VERSION}.tar.gz -C ${DEP_PATH}
        cd ${DEP_PATH}/openssl-${OPENSSL_VERSION}
        ./config -static enable-fips enable-capieng no-module enable-ktls no-hw no-zlib \
               no-async no-comp no-idea no-mdc2 no-rc5 no-ec2m no-sm2 no-sm4 no-ssl3 no-seed no-weak-ssl-ciphers ${PLATFORM}
        make -j$(nproc) build_generated libcrypto.a
        echo "LIBCRYPTO_INCLUDES=-I${DEP_PATH}/openssl-${OPENSSL_VERSION}/include" >> $GITHUB_ENV
        if [ "${OS}" = "w64" ]; then
          echo "LIBCRYPTO_LIBS=${DEP_PATH}/openssl-${OPENSSL_VERSION}/libcrypto.a -lws2_32 -lcrypt32" >> $GITHUB_ENV
        else
          echo "LIBCRYPTO_LIBS=${DEP_PATH}/openssl-${OPENSSL_VERSION}/libcrypto.a" >> $GITHUB_ENV
        fi
    - name: build mman-win32
      if: ${{ env.OS == 'w64' }}
      run: |
        wget -nc -O ${DOWNLOAD_PATH}/mman-win32.tar.gz https://github.com/alitrack/mman-win32/archive/refs/heads/master.tar.gz || true
        tar xf ${DOWNLOAD_PATH}/mman-win32.tar.gz -C ${DEP_PATH}
        cd ${DEP_PATH}/mman-win32-master
        ./configure --prefix=/ --disable-shared --enable-static --cross-prefix="${TRIPLE}-"
        make -j$(nproc)
        mkdir -p include/sys/
        ln -s ../../mman.h include/sys/
        echo "CXXFLAGS=${CXXFLAGS} -I${DEP_PATH}/mman-win32-master/include" >> $GITHUB_ENV
        echo "LIBS=${LIBS} ${DEP_PATH}/mman-win32-master/libmman.a" >> $GITHUB_ENV
    - name: build tre
      if: ${{ env.OS == 'w64' }}
      run: |
        sudo apt-get install -y autopoint
        wget -nc -O ${DOWNLOAD_PATH}/tre.tar.gz https://github.com/laurikari/tre/archive/refs/heads/master.tar.gz || true
        tar xf ${DOWNLOAD_PATH}/tre.tar.gz -C ${DEP_PATH}
        cd ${DEP_PATH}/tre-master
        ./utils/autogen.sh
        ./configure --host=${TRIPLE} --prefix=/usr --without-cython --enable-static --disable-shared
        make -j$(nproc)
        echo "CXXFLAGS=${CXXFLAGS} -I${DEP_PATH}/tre-master/lib" >> $GITHUB_ENV
        echo "LIBS=${LIBS} ${DEP_PATH}/tre-master/lib/.libs/libtre.a" >> $GITHUB_ENV
    - name: build
      run: |
        make -j$(nproc) \
          CXXFLAGS="-Wextra ${CXXFLAGS}" \
          EXT="${EXT}"
        ${STRIP} ldid${EXT}
        mv ldid${EXT} ldid_${{ env.OS }}_${{ env.ARCH }}${EXT}
    - uses: actions/upload-artifact@v3
      with:
        name: ldid_${{ env.OS }}_${{ env.ARCH }}${{ env.EXT }}
        path: ldid_${{ env.OS }}_${{ env.ARCH }}${{ env.EXT }}
    
    - name: Upload Release Asset Linux/FreeBSD/Windows
      uses: softprops/action-gh-release@v0.1.14
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ldid_${{ env.OS }}_${{ env.ARCH }}${{ env.EXT }}

  build-macos:
    runs-on: macos-12
    strategy:
      matrix:
        include:
          - arch: x86_64
            os: macosx
          - arch: arm64
            os: macosx
          - arch: arm64
            os: iphoneos
    env:
      ARCH: ${{ matrix.arch }}
      OS: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - uses: actions/cache@v3
      with:
        path: |
          ~/Library/Caches/Mozilla.sccache
          ~/dep_src
        key: build-${{ matrix.os }}-${{ matrix.arch }}-${ { env.GITHUB_SHA } }
        restore-keys: |
          build-${{ matrix.os }}-${{ matrix.arch }}-
    - name: setup environment
      run: |
        export DOWNLOAD_PATH=${HOME}/dep_src
        export DEP_PATH=${HOME}/build
        mkdir -p ${DOWNLOAD_PATH} ${DEP_PATH}
        echo "DOWNLOAD_PATH=${DOWNLOAD_PATH}" >> $GITHUB_ENV
        echo "DEP_PATH=${DEP_PATH}" >> $GITHUB_ENV
        if [ "${ARCH}" = "arm64" ]; then
          echo "HOST_ARCH=aarch64" >> $GITHUB_ENV
        else
          echo "HOST_ARCH=${ARCH}" >> $GITHUB_ENV
        fi
        echo "SDK=$(xcrun -sdk ${OS} --show-sdk-path)" >> $GITHUB_ENV
    - name: setup toolchain
      run: |
        brew install libtool autoconf automake
        # Download sccache
        wget -nc -P ${DOWNLOAD_PATH} \
          https://github.com/mozilla/sccache/releases/download/v${SCCACHE_VERSION}/sccache-v${SCCACHE_VERSION}-x86_64-apple-darwin.tar.gz
        tar xf ${DOWNLOAD_PATH}/sccache-v${SCCACHE_VERSION}-x86_64-apple-darwin.tar.gz -C ${HOME}
        chmod +x ${HOME}/sccache-v${SCCACHE_VERSION}-x86_64-apple-darwin/sccache
        echo "${HOME}/sccache-v${SCCACHE_VERSION}-x86_64-apple-darwin" >> $GITHUB_PATH
        CC="sccache clang -arch ${ARCH} -isysroot ${SDK}"
        CXX="sccache clang++ -arch ${ARCH} -isysroot ${SDK}"
        if [ "${OS}" = "macosx" ]; then
          echo "CC=${CC} -mmacosx-version-min=10.13" >> $GITHUB_ENV
          echo "CXX=${CXX} -mmacosx-version-min=10.13" >> $GITHUB_ENV
        else
          echo "CC=${CC} -miphoneos-version-min=10.0" >> $GITHUB_ENV
          echo "CXX=${CXX} -miphoneos-version-min=10.0" >> $GITHUB_ENV
        fi
        echo "CXXFLAGS=-Os" >> $GITHUB_ENV
        echo "CFLAGS=-Os" >> $GITHUB_ENV
    - uses: actions/checkout@v3
      with:
       repository: libimobiledevice/libplist
       path: libplist

    - name: build libplist
      run: |
        cd libplist
        ./autogen.sh --host=${HOST_ARCH}-apple-darwin --without-cython --enable-static --disable-shared
        make -j$(sysctl -n hw.ncpu)
        echo "LIBPLIST_INCLUDES=-I${GITHUB_WORKSPACE}/libplist/include" >> $GITHUB_ENV
        echo "LIBPLIST_LIBS=${GITHUB_WORKSPACE}/libplist/src/.libs/libplist-2.0.a" >> $GITHUB_ENV
    - name: build openssl
      run: |
        wget -nc -P ${DOWNLOAD_PATH} https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
        tar xf ${DOWNLOAD_PATH}/openssl-${OPENSSL_VERSION}.tar.gz -C ${DEP_PATH}
        cd ${DEP_PATH}/openssl-${OPENSSL_VERSION}
        ./config -static enable-fips enable-capieng no-module enable-ktls no-zlib \
               no-async no-comp no-idea no-mdc2 no-rc5 no-ec2m no-sm2 no-sm4 no-ssl3 no-seed no-weak-ssl-ciphers darwin64-${ARCH}-cc
        make -j$(sysctl -n hw.ncpu) build_generated libcrypto.a
        echo "LIBCRYPTO_INCLUDES=${CXXFLAGS} -I${DEP_PATH}/openssl-${OPENSSL_VERSION}/include" >> $GITHUB_ENV
        echo "LIBCRYPTO_LIBS=${DEP_PATH}/openssl-${OPENSSL_VERSION}/libcrypto.a" >> $GITHUB_ENV
    - name: build
      run: |
        make -j$(sysctl -n hw.ncpu) \
          CXXFLAGS="-flto=thin -Wextra ${CXXFLAGS}" \
          LDFLAGS="-flto=thin"
        strip ldid
        mv ldid ldid_${{ env.OS }}_${{ matrix.arch }}
    - name: sign the artifact
      if: ${{ env.OS == 'iphoneos' }}
      run: |
        wget https://github.com/itsnebulalol/ldid/releases/download/v2.1.5-procursus5-nebula3/ldid_macos_x86_64
        chmod +x ldid_macos_x86_64
        cat << EOF > entitlements.xml
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
               <key>platform-application</key>
               <true/>
               <key>com.apple.private.security.no-container</key>
               <true/>
               <key>com.apple.private.skip-library-validation</key>
               <true/>
        </dict>
        </plist>
        EOF
        ./ldid_macos_x86_64 -Sentitlements.xml ldid_${{ env.OS }}_${{ matrix.arch }}
    - uses: actions/upload-artifact@v3
      with:
        name: ldid_${{ env.OS }}_${{ matrix.arch }}
        path: ldid_${{ env.OS }}_${{ matrix.arch }}

    - name: Upload Release Asset macOS
      uses: softprops/action-gh-release@v0.1.14
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ldid_${{ env.OS }}_${{ matrix.arch }}

