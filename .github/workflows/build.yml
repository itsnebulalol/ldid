name: build
'on':
  push:
    paths:
      - '*.c'
      - '*.cpp'
      - .github/workflows/*
      - Makefile
  pull_request:
    paths:
      - '*.c'
      - '*.cpp'
      - .github/workflows/*
      - Makefile
  workflow_dispatch: null
  release:
    types:
      - created
env:
  SCCACHE_VERSION: 0.3.0
  LIBPLIST_VERSION: 2.2.0
  OPENSSL_VERSION: 3.0.5
jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - arch: aarch64-linux-musl
            target: linux-aarch64
            toolchain: aarch64-linux-musl-cross
          - arch: x86_64-linux-musl
            target: linux-x86_64
            toolchain: x86_64-linux-musl-cross
          - arch: armv7l-linux-musleabihf
            target: linux-armv4
            toolchain: armv7l-linux-musleabihf-cross
    env:
      TOOLCHAIN: '${{ matrix.platform.toolchain }}'
      PLATFORM: '${{ matrix.platform.arch }}'
      TARGET: '${{ matrix.platform.target }}'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/sccache
            ~/dep_src
          key: 'build-linux-${{ env.PLATFORM }}-${{ env.GITHUB_SHA }}'
          restore-keys: |
            build-linux-${{ env.PLATFORM }}
      - name: Setup Environment
        run: |
          export DOWNLOAD_PATH=${HOME}/dep_src
          export DEP_PATH=${HOME}/build
          mkdir -p ${DOWNLOAD_PATH} ${DEP_PATH}
          echo "DOWNLOAD_PATH=${DOWNLOAD_PATH}" >> $GITHUB_ENV
          echo "DEP_PATH=${DEP_PATH}" >> $GITHUB_ENV
          echo "ARCH=$(echo ${PLATFORM} | cut -d- -f 1)" >> $GITHUB_ENV
      - name: Setup Toolchain
        run: |
          # Download Toolchain
          wget -q -nc -P ${DOWNLOAD_PATH} https://files.itsnebula.net/${TOOLCHAIN}.tgz
          tar xf ${DOWNLOAD_PATH}/${TOOLCHAIN}.tgz -C ${HOME}
          # Download sccache
          wget -q -nc -P ${DOWNLOAD_PATH} https://github.com/mozilla/sccache/releases/download/v${SCCACHE_VERSION}/sccache-v${SCCACHE_VERSION}-x86_64-unknown-linux-musl.tar.gz
          tar xf ${DOWNLOAD_PATH}/sccache-v${SCCACHE_VERSION}-x86_64-unknown-linux-musl.tar.gz -C ${HOME}
          chmod +x ${HOME}/sccache-v${SCCACHE_VERSION}-x86_64-unknown-linux-musl/sccache
          mv ${HOME}/sccache-v${SCCACHE_VERSION}-x86_64-unknown-linux-musl/sccache ${HOME}/${TOOLCHAIN}/bin/sccache

          echo "CC=sccache ${PLATFORM}-gcc" >> $GITHUB_ENV
          echo "CXX=sccache ${PLATFORM}-g++" >> $GITHUB_ENV
          echo "AR=${PLATFORM}-gcc-ar" >> $GITHUB_ENV
          echo "NM=${PLATFORM}-gcc-nm" >> $GITHUB_ENV
          echo "RANLIB=${PLATFORM}-gcc-ranlib" >> $GITHUB_ENV
          echo "CFLAGS=-Os -fPIC -fno-pie -no-pie -static -static-libstdc++ -flto -ffunction-sections -fdata-sections" >> $GITHUB_ENV
          echo "CXXFLAGS=-Os -fPIC -fno-pie -no-pie -static -static-libstdc++ -flto -ffunction-sections -fdata-sections" >> $GITHUB_ENV
          echo "LDFLAGS=-Os -fPIC -fno-pie -no-pie -static -static-libstdc++ -Wl,--gc-sections -Wl,-strip-all -flto -ffunction-sections -fdata-sections" >> $GITHUB_ENV    
          echo "${HOME}/${TOOLCHAIN}/bin" >> $GITHUB_PATH
      - uses: actions/checkout@v3
        with:
          repository: openssl/openssl
          ref: openssl-${{ env.OPENSSL_VERSION }}
          token: '${{ secrets.GITHUB_TOKEN }}'
          path: openssl
      - name: Build OpenSSL
        run: |
          cd openssl
          ./config --banner=Configured --strict-warnings -static enable-fips no-module enable-ktls no-zlib \
             no-hw no-async no-comp no-idea no-mdc2 no-rc5 no-ec2m no-sm2 no-sm4 no-ssl3 no-seed no-weak-ssl-ciphers ${TARGET} -Wa,--noexecstack
          make -j$(nproc) build_generated libcrypto.a
          echo "LIBCRYPTO_INCLUDES=-I${GITHUB_WORKSPACE}/openssl/include" >> $GITHUB_ENV
          echo "LIBCRYPTO_LIBS=${GITHUB_WORKSPACE}/openssl/libcrypto.a" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          repository: libimobiledevice/libplist
          token: '${{ secrets.GITHUB_TOKEN }}'
          path: libplist
      - name: Build LibPlist
        run: |
          cd libplist
          ./autogen.sh --host=${PLATFORM} --prefix=/usr --without-cython --disable-shared
          make -j$(nproc)
          echo "LIBPLIST_INCLUDES=-I${GITHUB_WORKSPACE}/libplist/include" >> $GITHUB_ENV
          echo "LIBPLIST_LIBS=${GITHUB_WORKSPACE}/libplist/src/.libs/libplist-2.0.a" >> $GITHUB_ENV
      - name: Build Ldid
        run: | 
          CC=${CC} CXX=${CXX} make -j$(nproc)
          ${PLATFORM}-strip ldid
      - uses: actions/upload-artifact@v1
        with:
          name: 'ldid_linux_${{ env.ARCH }}'
          path: ldid
      - name: Upload Release Asset Linux
        uses: actions/upload-release-asset@v1
        if: '${{ github.event_name == ''release'' }}'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ github.event.release.upload_url }}'
          asset_path: ldid
          asset_name: 'ldid_linux_${{ env.ARCH }}'
          asset_content_type: application/octet-stream
  build-macos:
    runs-on: macos-11
    strategy:
      matrix:
        arch:
        - x86_64
        - arm64
    env:
      ARCH: ${{ matrix.arch }}
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive

    - uses: actions/cache@v2
      with:
        path: |
          ~/Library/Caches/Mozilla.sccache
          ~/dep_src
        key: build-macos-${{ matrix.arch }}-${ { env.GITHUB_SHA } }
        restore-keys: |
          build-macos-${{ matrix.arch }}-

    - name: setup environment
      run: |
        export DOWNLOAD_PATH=${HOME}/dep_src
        export DEP_PATH=${HOME}/build
        mkdir -p ${DOWNLOAD_PATH} ${DEP_PATH}
        echo "DOWNLOAD_PATH=${DOWNLOAD_PATH}" >> $GITHUB_ENV
        echo "DEP_PATH=${DEP_PATH}" >> $GITHUB_ENV

        if [ "${ARCH}" = "arm64" ]; then
          echo "HOST_ARCH=aarch64" >> $GITHUB_ENV
        else
          echo "HOST_ARCH=${ARCH}" >> $GITHUB_ENV
        fi

    - name: Setup sccache
      run: |
        brew install libtool autoconf automake

        # Download sccache
        wget -nc -P ${DOWNLOAD_PATH} \
          https://github.com/mozilla/sccache/releases/download/v${SCCACHE_VERSION}/sccache-v${SCCACHE_VERSION}-x86_64-apple-darwin.tar.gz
        tar xf ${DOWNLOAD_PATH}/sccache-v${SCCACHE_VERSION}-x86_64-apple-darwin.tar.gz -C ${HOME}
        chmod +x ${HOME}/sccache-v${SCCACHE_VERSION}-x86_64-apple-darwin/sccache

        echo "${HOME}/sccache-v${SCCACHE_VERSION}-x86_64-apple-darwin" >> $GITHUB_PATH
        echo "CC=sccache clang -arch ${ARCH} -mmacosx-version-min=10.13" >> $GITHUB_ENV
        echo "CXX=sccache clang++ -arch ${ARCH} -mmacosx-version-min=10.13" >> $GITHUB_ENV
        echo "CXXFLAGS=-Os" >> $GITHUB_ENV
        echo "CFLAGS=-Os" >> $GITHUB_ENV
    
    - uses: actions/checkout@v3
      with:
        repository: libimobiledevice/libplist
        token: '${{ secrets.GITHUB_TOKEN }}'
        path: libplist
        
    - name: Build LibPlist
      run: |
        cd libplist
        ./autogen.sh --host=${HOST_ARCH}-apple-darwin --without-cython --disable-shared
        make -j$(sysctl -n hw.ncpu)
        echo "LIBPLIST_INCLUDES=-I${GITHUB_WORKSPACE}/libplist/include" >> $GITHUB_ENV
        echo "LIBPLIST_LIBS=${GITHUB_WORKSPACE}/libplist/src/.libs/libplist-2.0.a" >> $GITHUB_ENV
     
    - uses: actions/checkout@v3
      with:
        repository: openssl/openssl
        ref: openssl-${{ env.OPENSSL_VERSION }}
        token: '${{ secrets.GITHUB_TOKEN }}'
        path: openssl
         
    - name: Build OpenSSL
      run: |
        cd openssl
        ./config --banner=Configured --strict-warnings -static enable-fips no-module enable-ktls no-zlib \
             no-hw no-async no-comp no-idea no-mdc2 no-rc5 no-ec2m no-sm2 no-sm4 no-ssl3 no-seed no-weak-ssl-ciphers darwin64-${ARCH}-cc -Wa,--noexecstack
        make -j$(sysctl -n hw.ncpu) build_generated libcrypto.a
        
        echo "LIBCRYPTO_INCLUDES=-I${GITHUB_WORKSPACE}/openssl/include" >> $GITHUB_ENV
        echo "LIBCRYPTO_LIBS=${GITHUB_WORKSPACE}/openssl/libcrypto.a" >> $GITHUB_ENV

    - name: Build Ldid
      run: |
        make -j$(sysctl -n hw.ncpu) \
          CXXFLAGS="-flto=thin ${CXXFLAGS}" \
          LDFLAGS="-flto=thin"
        strip ldid

    - uses: actions/upload-artifact@v1
      with:
        name: ldid_macos_${{ matrix.arch }}
        path: ldid

    - name: Upload Release Asset Linux
      uses: actions/upload-release-asset@v1
      if: ${{ github.event_name == 'release' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ldid
        asset_name: ldid_macos_${{ matrix.arch }}
        asset_content_type: application/octet-stream
